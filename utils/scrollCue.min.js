function scrollQue() {
    let elements = [];
    let queryGroups = {};
    let settings = {};
    let resizeTimeout = 0;
    let enabled = true;
    let active = true;
    let hasDocSlider = false;
    let resetOnPageChange = false;

    const defaultSettings = {
        duration: 600,
        interval: -0.7,
        percentage: 0.75,
        enable: true,
        docSlider: false,
        pageChangeReset: false
    };

    const utils = {
        setEvents: function (withDocSlider) {
            const handleScroll = () => {
                if (enabled) {
                    requestAnimationFrame(() => {
                        enabled = true;
                        if (active) {
                            utils.setQuery();
                            utils.runQuery();
                        }
                    });
                    enabled = false;
                }
            };

            if (active && !withDocSlider)
                window.addEventListener('load', utils.runQuery);
            window.addEventListener('scroll', handleScroll);

            if (hasDocSlider) {
                const pages = docSlider.getElements().pages;
                for (let page of pages) {
                    page.addEventListener('scroll', (e) => {
                        const currentIndex = docSlider
                            .getCurrentIndex()
                            .toString();
                        const targetIndex =
                            e.target.getAttribute('data-ds-index');
                        if (currentIndex !== targetIndex) return false;
                        if (docSlider._getWheelEnable()) handleScroll();
                    });
                }
            }

            window.addEventListener('resize', () => {
                if (resizeTimeout > 0) clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    if (active) {
                        utils.searchElements();
                        utils.setQuery();
                        utils.runQuery();
                    }
                }, 200);
            });
        },

        setOptions: function (customOptions, baseOptions) {
            const result = {};
            if (!customOptions) return result;

            for (let key of Object.keys(customOptions)) {
                if (typeof customOptions[key] === 'object') {
                    result[key] = utils.setOptions(
                        customOptions[key],
                        baseOptions?.[key]
                    );
                } else {
                    result[key] = baseOptions?.[key] ?? customOptions[key];
                }
            }
            return result;
        },

        searchElements: function () {
            elements = [];
            const cueParents = document.querySelectorAll(
                '[data-cues]:not([data-disabled])'
            );

            for (let parent of cueParents) {
                for (let child of parent.children) {
                    utils.setAttrFromParent(
                        child,
                        'data-cue',
                        parent,
                        'data-cues',
                        ''
                    );
                    utils.setAttrFromParent(
                        child,
                        'data-duration',
                        parent,
                        'data-duration',
                        false
                    );
                    utils.setAttrFromParent(
                        child,
                        'data-interval',
                        parent,
                        'data-interval',
                        false
                    );
                    utils.setAttrFromParent(
                        child,
                        'data-sort',
                        parent,
                        'data-sort',
                        false
                    );
                    utils.setAttrFromParent(
                        child,
                        'data-addClass',
                        parent,
                        'data-addClass',
                        false
                    );
                    utils.setAttrFromParent(
                        child,
                        'data-group',
                        parent,
                        'data-group',
                        false
                    );
                    utils.setAttrFromParent(
                        child,
                        'data-delay',
                        parent,
                        'data-delay',
                        false
                    );
                }
                parent.setAttribute('data-disabled', 'true');
            }

            const cueElements = document.querySelectorAll(
                '[data-cue]:not([data-show="true"])'
            );
            for (let el of cueElements) {
                elements.push({
                    elm: el,
                    cue: utils.getAttr(el, 'data-cue', 'fadeIn'),
                    duration: Number(
                        utils.getAttr(el, 'data-duration', settings.duration)
                    ),
                    interval: Number(
                        utils.getAttr(el, 'data-interval', settings.interval)
                    ),
                    order: utils.getOrderNumber(el),
                    sort: utils.getAttr(el, 'data-sort', null),
                    addClass: utils.getAttr(el, 'data-addClass', null),
                    group: utils.getAttr(el, 'data-group', null),
                    delay: Number(utils.getAttr(el, 'data-delay', 0))
                });
            }

            if (hasDocSlider) {
                const pages = docSlider.getElements().pages.length;
                for (let i = 0; i < pages; i++) {
                    const pageElements = document.querySelectorAll(
                        `[data-ds-index="${i}"] [data-cue]:not([data-scpage])`
                    );
                    for (let el of pageElements)
                        el.setAttribute('data-scpage', i);
                }
            }
        },

        setQuery: function () {
            queryGroups = {};
            for (let item of elements) {
                let key = item.group || '$' + utils.getOffsetTop(item.elm);
                if (!item.elm.hasAttribute('data-show')) {
                    if (hasDocSlider) {
                        const scpage = item.elm.getAttribute('data-scpage');
                        if (
                            scpage !== docSlider.getCurrentIndex().toString() &&
                            scpage !== null
                        )
                            continue;
                    }
                    if (!queryGroups[key]) queryGroups[key] = [];
                    queryGroups[key].push(item);
                }
            }
        },

        runQuery: function () {
            for (let key of Object.keys(queryGroups)) {
                const items = queryGroups[key];
                if (utils.isElementIn(items[0].elm)) {
                    if (items[0].sort === 'reverse') items.reverse();
                    if (items[0].sort === 'random') utils.shuffle(items);
                    utils.sortBy(items, ['order']);

                    let delayAcc = 0;
                    for (let i = 0; i < items.length; i++) {
                        const item = items[i];
                        item.elm.setAttribute('data-show', 'true');
                        utils.setClassNames(item.elm, item.addClass);

                        delayAcc = utils.getNextDelay(
                            delayAcc,
                            items[i - 1],
                            item.interval
                        );

                        Object.assign(item.elm.style, {
                            animationName: item.cue,
                            animationDuration: `${item.duration}ms`,
                            animationTimingFunction: 'ease',
                            animationDelay: `${delayAcc + item.delay}ms`,
                            animationDirection: 'normal',
                            animationFillMode: 'both'
                        });
                    }
                    delete queryGroups[key];
                }
            }
        },

        sortBy: function (arr, keys) {
            arr.sort((a, b) => {
                for (let key of keys) {
                    if (a[key] > b[key]) return 1;
                    if (a[key] < b[key]) return -1;
                }
                return 0;
            });
        },

        shuffle: function (arr) {
            for (let i = arr.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
            }
        },

        getNextDelay: function (current, prevItem, interval) {
            if (!prevItem) return 0;
            const base = prevItem.duration;
            const result = current + base + base * interval;
            return result < 0 ? 0 : result;
        },

        getOrderNumber: function (el) {
            const order = Number(el.getAttribute('data-order'));
            return !isNaN(order)
                ? order >= 0
                    ? order
                    : Number.MAX_SAFE_INTEGER + order
                : Number.MAX_SAFE_INTEGER / 2;
        },

        setAttrFromParent: function (
            child,
            childAttr,
            parent,
            parentAttr,
            fallback
        ) {
            if (
                parent.hasAttribute(parentAttr) &&
                !child.hasAttribute(childAttr)
            ) {
                child.setAttribute(childAttr, parent.getAttribute(parentAttr));
            } else if (fallback !== false && !child.hasAttribute(childAttr)) {
                child.setAttribute(childAttr, fallback);
            }
        },

        getAttr: function (el, attr, fallback) {
            return el.hasAttribute(attr) ? el.getAttribute(attr) : fallback;
        },

        getOffsetTop: function (el) {
            return (
                el.getBoundingClientRect().top +
                (window.pageYOffset || document.documentElement.scrollTop)
            );
        },

        setClassNames: function (el, classNames) {
            if (classNames) {
                for (let cls of classNames.split(' ')) {
                    el.classList.add(cls);
                }
            }
        },

        isElementIn: function (el) {
            const checkEnd = el.hasAttribute('data-scpage')
                ? utils.isScrollEndWithDocSlider
                : utils.isScrollEnd;
            return (
                window.pageYOffset >
                    utils.getOffsetTop(el) -
                        window.innerHeight * settings.percentage || checkEnd()
            );
        },

        isScrollEnd: function () {
            const doc = document.documentElement;
            return (
                (document.body.scrollTop || doc.scrollTop) >=
                doc.scrollHeight - doc.clientHeight
            );
        },

        isScrollEndWithDocSlider: function () {
            const page = docSlider.getCurrentPage();
            return page.scrollTop >= page.scrollHeight - page.clientHeight;
        }
    };

    return {
        init: function (options) {
            settings = utils.setOptions(defaultSettings, options);
            active = settings.enable;
            hasDocSlider = settings.docSlider;
            resetOnPageChange = settings.pageChangeReset;

            if (!hasDocSlider) {
                utils.setEvents();
                utils.searchElements();
                utils.setQuery();
            }
        },
        update: function () {
            if (active) {
                utils.searchElements();
                utils.setQuery();
                utils.runQuery();
            }
        },
        enable: function (val) {
            active = val === undefined ? !active : val;
            scrollQue().update();
        },
        _hasDocSlider: () => hasDocSlider,
        _hasPageChangeReset: () => resetOnPageChange,
        _initWithDocSlider: (e) => {
            utils.setEvents(e);
            utils.searchElements();
            utils.setQuery();
        },
        _updateWithDocSlider: () => {
            if (active) {
                utils.setQuery();
                utils.runQuery();
            }
        },
        _searchElements: () => utils.searchElements()
    };
}

export default scrollQue;
